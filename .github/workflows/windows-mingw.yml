name: Windows MinGW

on:
  - push
  - pull_request

env:
  CMAKE_VERSION: 3.22.2
  CCACHE_VERSION: 4.2.1
  SFML_VERSION: 2.5.1
  IMGUI_VERSION: 1.87

jobs:
  build:
    name: Windows - MinGW - ${{matrix.config.compiler_name}} - ${{matrix.build_type}}
    runs-on: ${{matrix.os}}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-2022]
        config: [
          {
            compiler_name: gcc,
            c_compiler_path: "C:/msys64/mingw64/bin/gcc.exe",
            cxx_compiler_path: "C:/msys64/mingw64/bin/g++.exe"
          },
          {
            compiler_name: clang,
            c_compiler_path: "C:/msys64/mingw64/bin/clang.exe",
            cxx_compiler_path: "C:/msys64/mingw64/bin/clang++.exe"
          }
        ]
        build_type: [Debug, Release]

    steps:
    - name: Checkout ImGui-SFML
      uses: actions/checkout@v2
      with:
        submodules: recursive
        path: imgui-sfml

    - name: Setup build environment
      shell: cmake -P {0}
      run: |
        execute_process(
          COMMAND "C:\msys64\usr\bin\bash"
          -lc 'pacman --noconfirm --needed -S mingw-w64-x86_64-${{matrix.config.compiler_name}}'
          RESULT_VARIABLE result
        )
        if(NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()
        execute_process(COMMAND ${{matrix.config.c_compiler_path}} --version)
        execute_process(COMMAND ${{matrix.config.cxx_compiler_path}} --version)
        file(APPEND "$ENV{GITHUB_ENV}" "CMAKE_GENERATOR=MinGW Makefiles\n")
        file(APPEND "$ENV{GITHUB_ENV}" "CC=${{matrix.config.c_compiler_path}}\n")
        file(APPEND "$ENV{GITHUB_ENV}" "CXX=${{matrix.config.cxx_compiler_path}}\n")

    - name: Setup CMake
      id: cmake
      uses: ./imgui-sfml/.github/actions/setup_cmake
      with:
        cmake_version: ${{env.CMAKE_VERSION}}
        used_env: ${{matrix.os}}

    - name: Setup ccache
      id: ccache
      uses: ./imgui-sfml/.github/actions/setup_ccache
      with:
        ccache_version: ${{env.CCACHE_VERSION}}
        used_env: ${{matrix.os}}
        cache_id: ${{matrix.os}}-mingw-${{matrix.config.compiler_name}}-${{matrix.build_type}}

    - name: Install SFML
      id: sfml
      uses: ./imgui-sfml/.github/actions/install_sfml
      with:
        sfml_version: ${{env.SFML_VERSION}}
        used_env: ${{matrix.os}}-mingw

    - name: Checkout Dear ImGui
      uses: actions/checkout@v2
      with:
        repository: ocornut/imgui
        submodules: recursive
        path: imgui
        ref: v${{env.IMGUI_VERSION}}

    - name: Configure
      shell: cmake -P {0}
      run: |
        file(TO_CMAKE_PATH [=[${{github.workspace}}]=] workspace)
        execute_process(
          COMMAND ${{steps.cmake.outputs.cmake_binary}}
            -S "${workspace}/imgui-sfml"
            -B "${workspace}/imgui-sfml/build"
            -D CMAKE_CONFIGURATION_TYPES=${{matrix.build_type}}
            -D CMAKE_BUILD_TYPE=${{matrix.build_type}}
            -D CMAKE_C_COMPILER_LAUNCHER=${{steps.ccache.outputs.ccache_binary}}
            -D CMAKE_CXX_COMPILER_LAUNCHER=${{steps.ccache.outputs.ccache_binary}}
            -D CMAKE_PREFIX_PATH=${{steps.sfml.outputs.sfml_install_dir}}
            -D SFML_DIR=${{steps.sfml.outputs.sfml_install_dir}}
            -D IMGUI_DIR=${workspace}/imgui
            -D BUILD_SHARED_LIBS=ON
          RESULT_VARIABLE result
        )
        if(NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

    - name: Build
      shell: cmake -P {0}
      run: |
        file(TO_CMAKE_PATH [=[${{github.workspace}}]=] workspace)
        include(ProcessorCount)
        ProcessorCount(N)
        execute_process(
          COMMAND ${{steps.cmake.outputs.cmake_binary}}
            --build "${workspace}/imgui-sfml/build"
            --config ${{matrix.build_type}}
            --parallel ${N}
          RESULT_VARIABLE result
        )
        if(NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()
        execute_process(COMMAND ${{steps.ccache.outputs.ccache_binary}} -s)
